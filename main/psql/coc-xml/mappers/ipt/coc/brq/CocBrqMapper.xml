<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
Mapper : BRQ
(GHEZALI Abdelhak)
-->
<mapper namespace="alpass.ipt.coc.brq.mapper.CocBrqMapper">


    <!--
     * Enregistrer les infractions

    -->
    <insert id="upsertCocBrq"
            parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        /* CocBrqMapper_upsertCocBrq */
        with upsert as
                     (
        UPDATE alpassint.tb_coc_brq
        SET
        sctr_cd=#{sctrCd},
        orgn_cd=#{orgnCd},
        brq_dt=TO_CHAR(TO_DATE(#{brqDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
        dptm_cd=#{dptmCd},
        dptm_nm=#{dptmNm},
        inf_type=#{infType},
        brq_dt_tm=TO_TIMESTAMP( #{brqDtTm}, 'DD/MM/YYYY HH24:MI:SS'),
        brq_post_cd=#{brqPostCd},
        brq_post_nm=#{brqPostNm},
        brq_post_nm_sup=#{brqPostNmSup},
        brq_tch_inf=#{brqTchInf},
        brq_dclr_no=#{brqDclrNo},
        brq_prcd=#{brqPrcd},
        typ_vyg=#{typVyg},
        inry_dptr_port=#{inryDptrPort},
        inry_arv_port=#{inryArvPort},
        inry_ship_nm=#{inryShipNm},
        inry_vyg_dt=TO_CHAR(TO_DATE(#{inryVygDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
        amnd_val=#{amndVal},
        curr_cd=#{currCd},
        amnd_jrdq_txt=#{amndJrdqTxt},
        brq_tp=#{brqTp},
        brq_long=#{brqLong},
        brq_lat=#{brqLat},
        cmrc_regs_no=#{cmrcRegsNo},
        dlvr_regs_no=TO_CHAR(TO_DATE(#{dlvrRegsNo}, 'DD/MM/YYYY'), 'YYYYMMDD'),
        nif_no=#{nifNo},
        cmpny_nm=#{cmpnyNm},
        cmpny_typ=#{cmpnyTyp},
        cmpny_addr=#{cmpnyAddr},
        vldt_stts=#{vldtStts},
        atch_file_id=#{atchFileId},
        del_yn='N',
        frst_regst_id=#{frstRegstId},
        frst_rgsr_dttm=SYSTIMESTAMP,
        last_chpr_id=#{lastChprId},
        last_chg_dttm=SYSTIMESTAMP
        WHERE brq_ref_no=#{brqRefNo}
          AND DEL_YN = 'N'
            returning *
            )
        INSERT
        INTO alpassint.tb_coc_brq
        (brq_ref_no,
         sctr_cd,
         orgn_cd,
         brq_dt,
         dptm_cd,
         dptm_nm,
         inf_type,
         brq_dt_tm,
         brq_post_cd,
         brq_post_nm,
         brq_post_nm_sup,
         brq_tch_inf,
         brq_dclr_no,
         brq_prcd,
         typ_vyg,
         inry_dptr_port,
         inry_arv_port,
         inry_ship_nm,
         inry_vyg_dt,
         amnd_val,
         curr_cd,
         amnd_jrdq_txt,
         brq_tp,
         brq_long,
         brq_lat,
         cmrc_regs_no,
         dlvr_regs_no,
         nif_no,
         cmpny_nm,
         cmpny_typ,
         cmpny_addr,
         vldt_stts,
         atch_file_id,
         del_yn,
         frst_regst_id,
         frst_rgsr_dttm,
         last_chpr_id,
         last_chg_dttm)
        SELECT #{brqRefNo},
               #{sctrCd},
               #{orgnCd},
               TO_CHAR(TO_DATE(#{brqDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{dptmCd},
               #{dptmNm},
               #{infType},
               TO_TIMESTAMP( #{brqDtTm}, 'DD/MM/YYYY HH24:MI:SS'),
               #{brqPostCd},
               #{brqPostNm},
               #{brqPostNmSup},
               #{brqTchInf},
               #{brqDclrNo},
               #{brqPrcd},
               #{typVyg},
               #{inryDptrPort},
               #{inryArvPort},
               #{inryShipNm},
               TO_CHAR(TO_DATE(#{inryVygDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{amndVal},
               #{currCd},
               #{amndJrdqTxt},
               #{brqTp},
               #{brqLong},
               #{brqLat},
               #{cmrcRegsNo},
               TO_CHAR(TO_DATE(#{dlvrRegsNo}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{nifNo},
               #{cmpnyNm},
               #{cmpnyTyp},
               #{cmpnyAddr},
               #{vldtStts},
               #{atchFileId},
               'N',
               #{frstRegstId},
               SYSTIMESTAMP,
               #{lastChprId},
               SYSTIMESTAMP WHERE NOT exists(select * from upsert)

    </insert>

    <update id="deleteCocBrq" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        UPDATE alpassint.tb_coc_brq
        SET del_yn = 'Y'
        WHERE DEL_YN = 'N'
        AND brq_ref_no=#{brqRefNo}
    </update>

    <!-- validate (Bilan rapport quotidien SPS / OTS ) by COR -->
    <update id="validateBrqSpsOts" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        UPDATE alpassint.tb_coc_brq
        SET vldt_stts = #{vldtStts}
        WHERE DEL_YN = 'N'
          AND brq_ref_no=#{brqRefNo}
    </update>

    <!-- validate (Bilan rapport quotidien INC / ACC ) by COR -->
    <update id="validateBrqIncAcc" parameterType="alpass.ipt.coc.brq.vo.CocBrqIncAccVo">
        UPDATE alpassint.tb_coc_brq_inc_acc
        SET vldt_stts = #{vldtStts}
        WHERE DEL_YN = 'N'
          AND inc_acc_ref_no=#{incAccRefNo}
    </update>

    <!--
     * Enregistrer les incidents ou les accidents


	-->
    <insert id="upsertCocBrqIncAcc" parameterType="alpass.ipt.coc.brq.vo.CocBrqIncAccVo">
        /* CocBrqMapper_upsertCocBrqIncAcc */
        with upsert as
                     (
        UPDATE alpassint.tb_coc_brq_inc_acc
        SET
            sctr_cd=#{sctrCd},
            orgn_cd=#{orgnCd},
            inc_acc_dt=TO_CHAR(TO_DATE(#{incAccDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
            dptm_cd=#{dptmCd},
            dptm_nm=#{dptmNm},
            inc_acc_sbjct=#{incAccSbjct},
            inc_acc_dt_tm=TO_TIMESTAMP( #{incAccDtTm}, 'DD/MM/YYYY HH24:MI:SS'),
            inc_acc_dtl=#{incAccDtl},
            inc_acc_type=#{incAccType},
            vldt_stts=#{vldtStts},
            atch_file_id=#{atchFileId},
            brq_lat=#{brqLat},
            brq_long=#{brqLong},
            del_yn='N',
            frst_regst_id=#{frstRegstId},
            frst_rgsr_dttm=SYSTIMESTAMP,
            last_chpr_id=#{lastChprId},
            last_chg_dttm=SYSTIMESTAMP
        WHERE inc_acc_ref_no=#{incAccRefNo}
          AND DEL_YN = 'N'
            returning *
            )
        INSERT
        INTO alpassint.tb_coc_brq_inc_acc
        (inc_acc_ref_no,
         sctr_cd,
         orgn_cd,
         inc_acc_dt,
         dptm_cd,
         dptm_nm,
         inc_acc_sbjct,
         inc_acc_dt_tm,
         inc_acc_dtl,
         inc_acc_type,
         vldt_stts,
         atch_file_id,
         brq_lat,
         brq_long,
         del_yn,
         frst_regst_id,
         frst_rgsr_dttm,
         last_chpr_id,
         last_chg_dttm)
        SELECT #{incAccRefNo},
               #{sctrCd},
               #{orgnCd},
               TO_CHAR(TO_DATE(#{incAccDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{dptmCd},
               #{dptmNm},
               #{incAccSbjct},
               TO_TIMESTAMP( #{incAccDtTm}, 'DD/MM/YYYY HH24:MI:SS'),
               #{incAccDtl},
               #{incAccType},
               #{vldtStts},
               #{atchFileId},
               #{brqLat},
               #{brqLong},
               'N',
               #{frstRegstId},
               SYSTIMESTAMP,
               #{lastChprId},
               SYSTIMESTAMP WHERE NOT exists(select * from upsert)
    </insert>
    <!--
     * suprimer les marchandises de l'infraction

    -->
    <delete id="deleteCocBrqCag" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        delete
        from alpassint.tb_coc_brq_cag
        WHERE brq_ref_no=#{brqRefNo}
    </delete>
    <!--
     * Enregistrer les marchandises de l'infraction

    -->
    <insert id="insertCocBrqCag" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        /* CocBrqMapper_insertCocBrqCag */
        INSERT
        INTO alpassint.tb_coc_brq_cag
        (brq_cag_ref_no,
         brq_ref_no,
         cag_tp,
         cag_qty,
         cag_wg,
         cag_ctg,
         cag_frd_val_unit,
         cag_frd_val_ttl,
         curr_cd)
        VALUES (nextval('alpassint.tb_coc_brq_cag_brq_cag_ref_no_seq'::regclass),
               #{brqRefNo},
               #{cagTp},
               #{cagQty},
               #{cagWg},
               #{cagCtg},
               #{cagFrdValUnit},
               #{cagFrdValTtl},
               #{currCd})
    </insert>
    <!--
     * suprimer les véhicules de l'infraction

    -->
    <delete id="deleteCocBrqTrnp" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        delete
        from alpassint.tb_coc_brq_trnp
        WHERE brq_ref_no=#{brqRefNo}
    </delete>
    <!--
     * Enregistrer les véhicules de l'infraction

    -->
    <insert id="insertCocBrqTrnp" parameterType="alpass.ipt.coc.brq.vo.CocBrqTrpnVo">
        /* CocBrqMapper_insertCocBrqTrnp */
        INSERT
        INTO alpassint.tb_coc_brq_trnp
        (brq_trnp_ref_no,
         brq_ref_no,
         trnp_tp,
         trnp_mt,
         trnp_chss_no,
         trnp_prtr,
         trnp_val,
         curr_cd)
        VALUES (nextval('alpassint.tb_coc_brq_trnp_brq_trnp_ref_no_seq'::regclass),
               #{brqRefNo},
               #{trnpTp},
               #{trnpMt},
               #{trnpChssNo},
               #{trnpPrtr},
               #{trnpVal},
               #{currCd})
    </insert>
    <!--
      * suprimer les personnes responsable / bénificaitaires de l'infraction

    -->
    <delete id="deleteCocBrqPrsn" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        delete
        from alpassint.tb_coc_brq_prsn
        WHERE brq_ref_no=#{brqRefNo}
    </delete>
    <!--
      * Enregistrer les personnes responsable de l'infraction

    -->
    <insert id="insertCocBrqPrsnRes" parameterType="alpass.ipt.coc.brq.vo.CocBrqPrsnVo">
        /* CocBrqMapper_insertCocBrqPrsnRes */
        INSERT
        INTO alpassint.tb_coc_brq_prsn
        (brq_prsn_ref_no,
         brq_ref_no,
         brq_prsn_tp_cd,
         prsn_nm,
         prsn_fm_nm,
         prsn_rgsr_no,
         prsn_nat_nm,
         prsn_post_cd,
         prsn_post_nm,
         prsn_post_nm_sup,
         prsn_brdy,
         prsn_age,
         prsn_gndr,
         dlv_dt,
         dlv_agncy,
         typ_doc)
        VALUES (nextval('alpassint.tb_coc_brq_prsn_brq_prsn_ref_no_seq'::regclass),
               #{brqRefNo},
               #{brqPrsnTpCd},
               #{prsnNm},
               #{prsnFmNm},
               #{prsnRgsrNo},
               #{prsnNatNm},
               #{prsnPostCd},
               #{prsnPostNm},
               #{prsnPostNmSup},
               TO_CHAR(TO_DATE(#{prsnBrdy}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{prsnAge},
               #{prsnGndr},
               TO_CHAR(TO_DATE(#{dlvDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{dlvAgncy},
               #{typDoc})
    </insert>

    <!--
     * Enregistrer les personnes bénificaitaires de l'infraction

    -->
    <insert id="insertCocBrqPrsnBnf" parameterType="alpass.ipt.coc.brq.vo.CocBrqPrsnVo">
        /* CocBrqMapper_insertCocBrqPrsnBnf */
        INSERT
        INTO alpassint.tb_coc_brq_prsn
        (brq_prsn_ref_no,
         brq_ref_no,
         brq_prsn_tp_cd,
         prsn_nm,
         prsn_fm_nm,
         prsn_rgsr_no,
         prsn_nat_nm,
         prsn_post_cd,
         prsn_post_nm,
         prsn_post_nm_sup,
         prsn_brdy,
         prsn_age,
         prsn_gndr,
         dlv_dt,
         dlv_agncy,
         typ_doc)
        VALUES (nextval('alpassint.tb_coc_brq_prsn_brq_prsn_ref_no_seq'::regclass),
               #{brqRefNo},
               #{brqPrsnTpCd},
               #{prsnNm},
               #{prsnFmNm},
               #{prsnRgsrNo},
               #{prsnNatNm},
               #{prsnPostCd},
               #{prsnPostNm},
               #{prsnPostNmSup},
               TO_CHAR(TO_DATE(#{prsnBrdy}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{prsnAge},
               #{prsnGndr},
                TO_CHAR(TO_DATE(#{dlvDt}, 'DD/MM/YYYY'), 'YYYYMMDD'),
               #{dlvAgncy},
               #{typDoc})
    </insert>


        <!--
        * suprimer les employées de la douane qui fait l'infraction

        -->
    <delete id="deleteCocBrqEmp" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        delete
        from alpassint.tb_coc_brq_emp
        WHERE brq_ref_no=#{brqRefNo}
    </delete>
    <!--
    * Enregistrer les employées de la douane qui fait l'infraction

    -->
    <insert id="insertCocBrqEmp" parameterType="alpass.ipt.coc.brq.vo.CocBrqEmpVo">
        /* CocBrqMapper_insertCocBrqEmp */
        INSERT
        INTO alpassint.tb_coc_brq_emp
        (brq_emp_ref_no,
         brq_ref_no,
         emp_pbsr_no,
         emp_fmnm,
         emp_nm,
         emp_fonc_nm,
         emp_grd_nm)
        VALUES (nextval('alpassint.tb_coc_brq_emp_brq_emp_ref_no_seq'::regclass),
               #{brqRefNo},
               #{empPbsrNo},
               #{empFmnm},
               #{empNm},
               #{empFoncNm},
               #{empGrdNm})
    </insert>
    <!--
     * select l'infraction SPS / OTS

    -->
    <select id="selectBrq" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqVo">
        /* CocBrqMapper_selectBrq */
        SELECT  A.brq_ref_no,
                A.sctr_cd,
                A.orgn_cd,
                TO_CHAR(TO_DATE(A.brq_dt),'DD/MM/YYYY') as brq_dt,
                A.dptm_cd,
                A.dptm_nm,
                A.inf_type,
                TO_CHAR((A.brq_dt_tm), 'DD/MM/YYYY HH24:MI') as brq_dt_tm,
                A.brq_post_cd,
                A.brq_post_nm,
                A.brq_post_nm_sup,
                A.brq_tch_inf,
                A.brq_dclr_no,
                A.brq_prcd,
                A.typ_vyg,
                A.inry_dptr_port,
                A.inry_arv_port,
                A.inry_ship_nm,
                TO_CHAR(TO_DATE(A.inry_vyg_dt),'DD/MM/YYYY') as inry_vyg_dt,
                A.amnd_val,
                A.curr_cd,
                A.amnd_jrdq_txt,
                A.brq_tp,
                A.brq_long,
                A.brq_lat,
                A.cmrc_regs_no,
                TO_CHAR(TO_DATE(A.dlvr_regs_no),'DD/MM/YYYY') as dlvr_regs_no,
                A.nif_no,
                A.cmpny_nm,
                A.cmpny_typ,
                A.cmpny_addr,
                A.vldt_stts,
                A.atch_file_id
        FROM alpassint.tb_coc_brq A
        WHERE DEL_YN = 'N'
        <if test="brqRefNo != null and brqRefNo != ''">
            AND brq_ref_no=#{brqRefNo};
        </if>
    </select>

    <!--
     * select l'infraction INC / ACC

    -->
    <select id="selectBrqIncAcc" parameterType="alpass.ipt.coc.brq.vo.CocBrqIncAccVo" resultType="alpass.ipt.coc.brq.vo.CocBrqIncAccVo">
        /* CocBrqMapper_selectBrqIncAcc */
        SELECT  A.inc_acc_ref_no,
        A.sctr_cd,
        A.orgn_cd,
        TO_CHAR(TO_DATE(A.inc_acc_dt),'DD/MM/YYYY') as inc_acc_dt,
        A.dptm_cd,
        A.dptm_nm,
        A.inc_acc_sbjct,
        TO_CHAR((A.inc_acc_dt_tm), 'DD/MM/YYYY HH24:MI') as incAccDtTm,
        A.inc_acc_dtl,
        A.inc_acc_type,
        A.vldt_stts,
        A.brq_lat,
        A.brq_long,
        atch_file_id
        FROM alpassint.tb_coc_brq_inc_acc A
        WHERE DEL_YN = 'N'
        <if test="incAccRefNo != null and incAccRefNo != ''">
            AND inc_acc_ref_no=#{incAccRefNo};
        </if>
    </select>
    <!--
     * select les infractions list for COC

    -->
    <select id="selectBrqList" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqVo">
        <include refid="pagination.header"/>
        /* CocBrqMapper_selectBrqList */
        SELECT 'false' AS chkSel,
        A.brq_ref_no,
        A.sctr_cd,
        A.orgn_cd,
        TO_CHAR(TO_DATE(A.brq_dt),'DD/MM/YYYY') as brq_dt,
        <if test="langCd == 'AR'">
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= A.sctr_cd) as dptm_nm,
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= A.dptm_cd) as dptm_cd,
        </if>
        <if test="langCd == 'FR'">
            (select orgn_nm from tb_poti_orgn where orgn_cd= A.sctr_cd ) as dptm_nm,
            (select orgn_nm from tb_poti_orgn where orgn_cd= A.dptm_cd ) as dptm_cd,
        </if>
        A.inf_type,
        A.brq_tp,
        A.brq_long,
        A.brq_lat,
        A.vldt_stts
        FROM alpassint.tb_coc_brq A
        WHERE DEL_YN = 'N'
        <if test="srchbrqRefNo != null and srchbrqRefNo != ''">
            AND UPPER(A.brq_ref_no) LIKE '%' || UPPER(#{srchbrqRefNo})||'%'
        </if>
        <if test="srchinfType != null and srchinfType != ''">
            AND UPPER(A.inf_type) LIKE '%' || UPPER(#{srchinfType})||'%'
        </if>
        <if test="srchbrqTp != null and srchbrqTp != ''">
            AND UPPER(A.brq_tp) LIKE '%' || UPPER(#{srchbrqTp})||'%'
        </if>
        <if test="srchdptmCd != null and srchdptmCd != ''">
            AND UPPER(A.sctr_cd) LIKE '%' || UPPER(#{srchdptmCd})||'%'
        </if>
        <if test="brqRqstDtFrom != null and brqRqstDtFrom != '' and brqRqstDtTo != null and brqRqstDtTo != ''">
            AND A.brq_dt <![CDATA[ >= ]]> TO_CHAR(TO_DATE(#{brqRqstDtFrom}, 'DD/MM/YYYY'), 'YYYYMMDD')
            AND A.brq_dt <![CDATA[ <= ]]> TO_CHAR(TO_DATE(#{brqRqstDtTo}, 'DD/MM/YYYY'), 'YYYYMMDD')
        </if>
        <if test="srchvldtStts != null and srchvldtStts != ''">
            AND A.vldt_stts =#{srchvldtStts}
        </if>
        UNION ALL
        SELECT 'false' AS chkSel,
               B.inc_acc_ref_no AS brq_ref_no,
        B.sctr_cd,
        B.orgn_cd,
        TO_CHAR(TO_DATE(B.inc_acc_dt),'DD/MM/YYYY') as brq_dt_tm,
        <if test="langCd == 'AR'">
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= B.sctr_cd) as dptm_nm,
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= B.dptm_cd) as dptm_cd,
        </if>
        <if test="langCd == 'FR'">
            (select orgn_nm from tb_poti_orgn where orgn_cd= B.sctr_cd ) as dptm_nm,
            (select orgn_nm from tb_poti_orgn where orgn_cd= B.dptm_cd) as dptm_cd,
        </if>
        B.inc_acc_sbjct as inf_type,
        B.inc_acc_type AS brq_tp,
        B.brq_long,
        B.brq_lat,
        B.vldt_stts
        FROM alpassint.tb_coc_brq_inc_acc B
        WHERE DEL_YN = 'N'
        <if test="srchbrqRefNo != null and srchbrqRefNo != ''">
            AND UPPER(B.inc_acc_ref_no) LIKE '%' || UPPER(#{srchbrqRefNo})||'%'
        </if>
        <if test="srchinfType != null and srchinfType != ''">
            AND UPPER(B.inc_acc_sbjct) LIKE '%' || UPPER(#{srchinfType})||'%'
        </if>
        <if test="srchbrqTp != null and srchbrqTp != ''">
            AND UPPER(B.inc_acc_type) LIKE '%' || UPPER(#{srchbrqTp})||'%'
        </if>
        <if test="srchdptmCd != null and srchdptmCd != ''">
            AND UPPER(B.sctr_cd) LIKE '%' || UPPER(#{srchdptmCd})||'%'
        </if>
        <if test="brqRqstDtFrom != null and brqRqstDtFrom != '' and brqRqstDtTo != null and brqRqstDtTo != ''">
            AND B.inc_acc_dt <![CDATA[ >= ]]> TO_CHAR(TO_DATE(#{brqRqstDtFrom}, 'DD/MM/YYYY'), 'YYYYMMDD')
            AND B.inc_acc_dt <![CDATA[ <= ]]> TO_CHAR(TO_DATE(#{brqRqstDtTo}, 'DD/MM/YYYY'), 'YYYYMMDD')
        </if>
        <if test="srchvldtStts != null and srchvldtStts != ''">
            AND B.vldt_stts =#{srchvldtStts}
        </if>
        ORDER BY brq_ref_no
        <include refid="pagination.footer"/>
    </select>

    <!--
     * select les infractions list for COR

    -->

    <select id="selectBrqListDrd" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqVo">
        <include refid="pagination.header"/>
        /* CocBrqMapper_selectBrqListDrd */
        SELECT  'false' AS chkSel,
                A.brq_ref_no,
        A.sctr_cd,
        A.orgn_cd,
        TO_CHAR(TO_DATE(A.brq_dt),'DD/MM/YYYY') as brq_dt,
        <if test="langCd == 'AR'">
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= A.orgn_cd ) as dptm_nm,
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= A.dptm_cd) as dptm_cd,
        </if>
        <if test="langCd == 'FR'">
            (select orgn_nm from tb_poti_orgn where orgn_cd= A.orgn_cd ) as dptm_nm,
            (select orgn_nm from tb_poti_orgn where orgn_cd= A.dptm_cd) as dptm_cd,
        </if>
        A.inf_type,
        A.brq_tp,
        A.brq_long,
        A.brq_lat,
        A.vldt_stts
        FROM alpassint.tb_coc_brq A
        WHERE DEL_YN = 'N'
        AND A.sctr_cd = #{sctrCd}
        <if test="srchbrqRefNo != null and srchbrqRefNo != ''">
            AND UPPER(A.brq_ref_no) LIKE '%' || UPPER(#{srchbrqRefNo})||'%'
        </if>
        <if test="srchinfType != null and srchinfType != ''">
            AND UPPER(A.inf_type) LIKE '%' || UPPER(#{srchinfType})||'%'
        </if>
        <if test="srchbrqTp != null and srchbrqTp != ''">
            AND UPPER(A.brq_tp) LIKE '%' || UPPER(#{srchbrqTp})||'%'
        </if>
        <if test="srchdptmCd != null and srchdptmCd != ''">
            AND UPPER(A.orgn_cd) LIKE '%' || UPPER(#{srchdptmCd})||'%'
        </if>
        <if test="brqRqstDtFrom != null and brqRqstDtFrom != '' and brqRqstDtTo != null and brqRqstDtTo != ''">
            AND A.brq_dt <![CDATA[ >= ]]> TO_CHAR(TO_DATE(#{brqRqstDtFrom}, 'DD/MM/YYYY'), 'YYYYMMDD')
            AND A.brq_dt <![CDATA[ <= ]]> TO_CHAR(TO_DATE(#{brqRqstDtTo}, 'DD/MM/YYYY'), 'YYYYMMDD')
        </if>
        <if test="srchvldtStts != null and srchvldtStts != ''">
            AND A.vldt_stts =#{srchvldtStts}
        </if>
        UNION ALL
        SELECT  'false' AS chkSel,
                B.inc_acc_ref_no AS brq_ref_no,
        B.sctr_cd,
        B.orgn_cd,
        TO_CHAR(TO_DATE(B.inc_acc_dt),'DD/MM/YYYY') as brq_dt_tm,
        <if test="langCd == 'AR'">
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= B.orgn_cd) as dptm_nm,
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= B.dptm_cd) as dptm_cd,
        </if>
        <if test="langCd == 'FR'">
            (select orgn_nm from tb_poti_orgn where orgn_cd= B.orgn_cd ) as dptm_nm,
            (select orgn_nm from tb_poti_orgn where orgn_cd= B.dptm_cd) as dptm_cd,
        </if>
        B.inc_acc_sbjct as inf_type,
        B.inc_acc_type AS brq_tp,
        B.brq_long,
        B.brq_lat,
        B.vldt_stts
        FROM alpassint.tb_coc_brq_inc_acc B
        WHERE DEL_YN = 'N'
        AND B.sctr_cd = #{sctrCd}
        <if test="srchbrqRefNo != null and srchbrqRefNo != ''">
            AND UPPER(B.inc_acc_ref_no) LIKE '%' || UPPER(#{srchbrqRefNo})||'%'
        </if>
        <if test="srchinfType != null and srchinfType != ''">
            AND UPPER(B.inc_acc_sbjct) LIKE '%' || UPPER(#{srchinfType})||'%'
        </if>
        <if test="srchbrqTp != null and srchbrqTp != ''">
            AND UPPER(B.inc_acc_type) LIKE '%' || UPPER(#{srchbrqTp})||'%'
        </if>
        <if test="srchdptmCd != null and srchdptmCd != ''">
            AND UPPER(B.orgn_cd) LIKE '%' || UPPER(#{srchdptmCd})||'%'
        </if>
        <if test="brqRqstDtFrom != null and brqRqstDtFrom != '' and brqRqstDtTo != null and brqRqstDtTo != ''">
            AND B.inc_acc_dt <![CDATA[ >= ]]> TO_CHAR(TO_DATE(#{brqRqstDtFrom}, 'DD/MM/YYYY'), 'YYYYMMDD')
            AND B.inc_acc_dt <![CDATA[ <= ]]> TO_CHAR(TO_DATE(#{brqRqstDtTo}, 'DD/MM/YYYY'), 'YYYYMMDD')
        </if>
        <if test="srchvldtStts != null and srchvldtStts != ''">
            AND B.vldt_stts =#{srchvldtStts}
        </if>
        ORDER BY brq_ref_no
        <include refid="pagination.footer"/>
    </select>


    <!--
     * select les infractions list for COD

    -->
    <select id="selectBrqListIdd" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqVo">
        <include refid="pagination.header"/>
        /* CocBrqMapper_selectBrqListIdd */
        SELECT  'false' AS chkSel,
                A.brq_ref_no,
        A.sctr_cd,
        A.orgn_cd,
        TO_CHAR(TO_DATE(A.brq_dt),'DD/MM/YYYY') as brq_dt,
        <if test="langCd == 'AR'">
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= A.dptm_cd) as dptm_nm,
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= A.dptm_cd) as dptm_cd,
        </if>
        <if test="langCd == 'FR'">
            (select orgn_nm from tb_poti_orgn where orgn_cd= A.dptm_cd ) as dptm_nm,
            (select orgn_nm from tb_poti_orgn where orgn_cd= A.dptm_cd) as dptm_cd,
        </if>
        A.inf_type,
        A.brq_tp,
        A.brq_long,
        A.brq_lat,
        A.vldt_stts
        FROM alpassint.tb_coc_brq A
        WHERE DEL_YN = 'N'
        AND A.orgn_cd = #{orgnCd}
        <if test="srchbrqRefNo != null and srchbrqRefNo != ''">
            AND UPPER(A.brq_ref_no) LIKE '%' || UPPER(#{srchbrqRefNo})||'%'
        </if>
        <if test="srchinfType != null and srchinfType != ''">
            AND UPPER(A.inf_type) LIKE '%' || UPPER(#{srchinfType})||'%'
        </if>
        <if test="srchbrqTp != null and srchbrqTp != ''">
            AND UPPER(A.brq_tp) LIKE '%' || UPPER(#{srchbrqTp})||'%'
        </if>
        <if test="srchdptmCd != null and srchdptmCd != ''">
            AND UPPER(A.dptm_cd) LIKE '%' || UPPER(#{srchdptmCd})||'%'
        </if>
        <if test="brqRqstDtFrom != null and brqRqstDtFrom != '' and brqRqstDtTo != null and brqRqstDtTo != ''">
            AND A.brq_dt <![CDATA[ >= ]]> TO_CHAR(TO_DATE(#{brqRqstDtFrom}, 'DD/MM/YYYY'), 'YYYYMMDD')
            AND A.brq_dt <![CDATA[ <= ]]> TO_CHAR(TO_DATE(#{brqRqstDtTo}, 'DD/MM/YYYY'), 'YYYYMMDD')
        </if>
        <if test="srchvldtStts != null and srchvldtStts != ''">
            AND A.vldt_stts =#{srchvldtStts}
        </if>
        UNION ALL
        SELECT  'false' AS chkSel,
                B.inc_acc_ref_no AS brq_ref_no,
        B.sctr_cd,
        B.orgn_cd,
        TO_CHAR(TO_DATE(B.inc_acc_dt),'DD/MM/YYYY') as brq_dt_tm,
        <if test="langCd == 'AR'">
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= B.dptm_cd) as dptm_nm,
            (select orgn_ar_nm from tb_poti_orgn where orgn_cd= B.dptm_cd) as dptm_cd,
        </if>
        <if test="langCd == 'FR'">
            (select orgn_nm from tb_poti_orgn where orgn_cd= B.dptm_cd ) as dptm_nm,
            (select orgn_nm from tb_poti_orgn where orgn_cd= B.dptm_cd) as dptm_cd,
        </if>
        B.inc_acc_sbjct as inf_type,
        B.inc_acc_type AS brq_tp,
        B.brq_long,
        B.brq_lat,
        B.vldt_stts
        FROM alpassint.tb_coc_brq_inc_acc B
        WHERE DEL_YN = 'N'
        AND B.orgn_cd = #{orgnCd}
        <if test="srchbrqRefNo != null and srchbrqRefNo != ''">
            AND UPPER(B.inc_acc_ref_no) LIKE '%' || UPPER(#{srchbrqRefNo})||'%'
        </if>
        <if test="srchbrqTp != null and srchbrqTp != ''">
            AND UPPER(B.inc_acc_type) LIKE '%' || UPPER(#{srchbrqTp})||'%'
        </if>
        <if test="srchinfType != null and srchinfType != ''">
            AND UPPER(B.inc_acc_sbjct) LIKE '%' || UPPER(#{srchinfType})||'%'
        </if>
        <if test="srchdptmCd != null and srchdptmCd != ''">
            AND UPPER(B.dptm_cd) LIKE '%' || UPPER(#{srchdptmCd})||'%'
        </if>
        <if test="brqRqstDtFrom != null and brqRqstDtFrom != '' and brqRqstDtTo != null and brqRqstDtTo != ''">
            AND B.inc_acc_dt <![CDATA[ >= ]]> TO_CHAR(TO_DATE(#{brqRqstDtFrom}, 'DD/MM/YYYY'), 'YYYYMMDD')
            AND B.inc_acc_dt <![CDATA[ <= ]]> TO_CHAR(TO_DATE(#{brqRqstDtTo}, 'DD/MM/YYYY'), 'YYYYMMDD')
        </if>
        <if test="srchvldtStts != null and srchvldtStts != ''">
            AND B.vldt_stts =#{srchvldtStts}
        </if>
        ORDER BY brq_ref_no
        <include refid="pagination.footer"/>
    </select>




    <!--
     * select marchandises list de l'infraction

    -->
    <select id="selectBrqCagList" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqCagVo">
        /* CocBrqMapper_selectBrqCagList */
        SELECT
        brq_ref_no,
        cag_tp,
        cag_qty,
        cag_wg,
        cag_ctg,
        cag_frd_val_unit,
        cag_frd_val_ttl,
        curr_cd
        FROM alpassint.tb_coc_brq_cag
        WHERE UPPER(brq_ref_no) LIKE UPPER(#{brqRefNo})

    </select>
    <!--
     * select transport utilisé list de l'infraction

    -->
    <select id="selectBrqTrpnList" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqTrpnVo">
        /* CocBrqMapper_selectBrqTrpnList */
        SELECT
            brq_ref_no,
            trnp_tp,
            trnp_mt,
            trnp_chss_no,
            trnp_prtr,
            trnp_val,
            curr_cd
        FROM alpassint.tb_coc_brq_trnp
        WHERE UPPER(brq_ref_no) LIKE UPPER(#{brqRefNo})

    </select>
    <!--
     * select personne bénificitaires list de l'infraction

    -->
    <select id="selectBrqPrsnBnfList" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqPrsnVo">
        /* CocBrqMapper_selectBrqPrsnBnfList */
        SELECT
        brq_ref_no,
        brq_prsn_tp_cd,
        prsn_nm,
        prsn_fm_nm,
        prsn_rgsr_no,
        prsn_nat_nm,
        prsn_post_cd,
        prsn_post_nm,
        prsn_post_nm_sup,
        TO_CHAR(TO_DATE(prsn_brdy),'DD/MM/YYYY') as prsn_brdy,
        prsn_age,
        prsn_gndr,
        TO_CHAR(TO_DATE(dlv_dt),'DD/MM/YYYY') as dlv_dt,
        dlv_agncy,
        typ_doc
        FROM alpassint.tb_coc_brq_prsn
        WHERE brq_prsn_tp_cd = 'BNF'
        AND UPPER(brq_ref_no) LIKE UPPER(#{brqRefNo})

    </select>
    <!--
     * select personne responsable list de l'infraction

    -->
    <select id="selectBrqPrsnResList" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqPrsnVo">
        /* CocBrqMapper_selectBrqPrsnResList */
        SELECT
        brq_ref_no,
        brq_prsn_tp_cd,
        prsn_nm,
        prsn_fm_nm,
        prsn_rgsr_no,
        prsn_nat_nm,
        prsn_post_cd,
        prsn_post_nm,
        prsn_post_nm_sup,
        TO_CHAR(TO_DATE(prsn_brdy),'DD/MM/YYYY') as prsn_brdy,
        prsn_age,
        prsn_gndr,
        TO_CHAR(TO_DATE(dlv_dt),'DD/MM/YYYY') as dlv_dt,
        dlv_agncy,
        typ_doc
        FROM alpassint.tb_coc_brq_prsn
        WHERE brq_prsn_tp_cd = 'RES'
        AND UPPER(brq_ref_no) LIKE UPPER(#{brqRefNo})
    </select>
    <!--
     * select les employes list qui fait l'infraction

    -->
    <select id="selectBrqEmpList" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.ipt.coc.brq.vo.CocBrqEmpVo">
        /* CocBrqMapper_selectBrqEmpList */
        SELECT
            brq_ref_no,
            emp_pbsr_no,
            emp_fmnm,
            emp_nm,
            emp_fonc_nm,
            emp_grd_nm
        FROM alpassint.tb_coc_brq_emp
        WHERE UPPER(brq_ref_no) LIKE UPPER(#{brqRefNo})
    </select>
    <!--
     * select REGION
    -->
    <select id="selectSctrArNm" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.com.cstm.vo.ComCstmOrgnVo">
        select orgn_ar_nm
        from tb_poti_orgn
        where orgn_cd=#{sctrCd}
    </select>

    <select id="selectDrdlatLong" resultType="alpass.ipt.pot.pm.cstm.vo.PotPmCstmOrgnVo">
        SELECT A.LTTD
             , A.LNGT
             , A.orgn_ar_nm
        FROM  alpassint.TB_POTI_ORGN A
        WHERE A.DEL_YN = 'N'
          AND A.dgd_cd = 'DIR-R';
    </select>

    <select id="selectIddlatLong" resultType="alpass.ipt.pot.pm.cstm.vo.PotPmCstmOrgnVo">
        SELECT A.LTTD
             , A.LNGT
             , A.orgn_ar_nm
        FROM  alpassint.TB_POTI_ORGN A
        WHERE A.DEL_YN = 'N'
          AND A.orgn_tp_cd = 'INS';
    </select>

    <!--
     * select IDD
    -->
    <select id="selectOrgnArNm" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo" resultType="alpass.com.cstm.vo.ComCstmOrgnVo">
        select orgn_ar_nm
        from tb_poti_orgn
        where orgn_cd=#{orgnCd}
    </select>

    <!--
     * select name of product

    -->
    <select id="selectCagNm" parameterType="alpass.ipt.coc.brq.vo.CocBrqCagVo" resultType="alpass.ipt.coc.brq.vo.CocBrqCagVo">
        /* CocBrqMapper_selectCagNm */
        SELECT
            B.CD_VDVAL_NM as cag_ctg
        FROM TB_COM_COMN_CD_D A,
             TB_COM_COMN_CD_D_LANG B
        WHERE A.COMN_CD = 'COM_0057'
          AND B.DEL_YN(+) = 'N'
          AND B.COMN_CD(+) = 'COC_0001'
          AND B.CD_VDVAL(+) = #{cagCtg}
          AND A.CD_VDVAL = B.LANG_CD(+)
          AND B.LANG_CD = 'AR'
    </select>


    <!--save user who saved brq -->
    <insert id="insertValidateUserBrq" parameterType="alpass.ipt.coc.brq.vo.CocBrqVo">
        /* CocBrqMapper_insertValidateUserBrq */
        INSERT
        INTO alpassint.tb_coc_brq_vldt
        (brq_vldt_ref_no,
         brq_ref_no,
         id_user,
         pbsr_no,
         emp_nm,
         emp_fmnm,
         sctr_cd,
         sctr_nm,
         frst_regst_id,
         frst_rgsr_dttm,
         last_chpr_id,
         last_chg_dttm)
        VALUES (nextval('alpassint.tb_coc_brq_vldt_brq_vldt_ref_no_seq'::regclass),
                #{brqRefNo},
                #{idUser},
                #{pbsrNo},
                #{empNm},
                #{empFmnm},
                #{sctrCd},
                #{sctrNm},
                #{frstRegstId},
                SYSTIMESTAMP,
                #{lastChprId},
                SYSTIMESTAMP)
    </insert>

</mapper>