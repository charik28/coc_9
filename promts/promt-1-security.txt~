
29-08
todo
make it so that label1/label2 (the display labels for popup selects) are separately configurable per table from code_common




âš¡ Key Point

You donâ€™t rewrite JWT parsing.

You reuse JHipsterâ€™s /api/account (or /authenticate) as the source of truth.

Your native server acts like a proxy and caches the result for faster future checks.

So weâ€™ll have your native server (port 3000) act as the proxy between the frontend and JHipster (port 82).

That means:

main.js (frontend) calls your native server at http://localhost:3000/api/v2/session/verify

Native server checks the cache first

If cache miss â†’ forwards the request to JHipster at http://localhost:82/api/account

Stores the result in cache â†’ returns response

ðŸ‘‰ðŸ‘‰ This way:

 Browser â†’ talks only to http://localhost:3000
 Native server â†’ validates token with http://localhost:82/api/account
 only once.

 Future calls use cached user info until expiry.
 Do you also want me to extend this to menus API (/api/v2/sys-menus) so the native server proxies/caches those too?



based on this jhipster security config parse it to use it in a new native project without jhipster


// also add a custom UserDetailsService and authentication manager


Perfect âœ…
Letâ€™s set up a full JHipster-style Logback configuration with:

Console logging (colored, dev-friendly).

Rolling file logging (daily + size-based rotation).

Async logging (so logging wonâ€™t block app threads).

Package-specific log levels.

Spring Boot property placeholders for flexibility (application.yml values injected).

 ----------------------
You have 2 main options:

Option 1: Keep JHipster as the auth provider

Donâ€™t let the Spring Native server decide "who is logged in".

Instead, call JHipsterâ€™s /api/whoami from the frontend after login, and based on the response load either index.html or login.html.

Your Spring Native server just serves static files, no auth logic.

Spring Native should just serve the static pages (index.html, login.html, etc.).

The frontend JavaScript decides which page to load by checking with the JHipster backend (via /api/account or /api/whoami using the JWT stored in localStorage/sessionStorage).
